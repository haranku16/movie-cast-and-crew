# Below code generated by Perplexity AI
import pytest
import pandas as pd
from pandas.testing import assert_frame_equal
from source_imdb import source_imdb

@pytest.fixture
def mock_dataframe():
    return pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})

def test_local_file_exists(mocker, mock_dataframe):
    mock_read_csv = mocker.patch('source_imdb.pd.read_csv', return_value=mock_dataframe)
    
    result = source_imdb('test_dataset')
    
    mock_read_csv.assert_called_once_with('./.data/test_dataset.csv')
    assert_frame_equal(result, mock_dataframe)

def test_local_file_not_exists(mocker, mock_dataframe, capsys):
    mock_read_csv = mocker.patch('source_imdb.pd.read_csv', side_effect=[FileNotFoundError, mock_dataframe])
    
    result = source_imdb('test_dataset')
    
    mock_read_csv.assert_called_with('https://datasets.imdbws.com/test_dataset.tsv.gz', compression='gzip', delimiter='\t')
    captured = capsys.readouterr()
    assert 'Local copy not found for test_dataset, so sourcing from the web...' in captured.out
    assert_frame_equal(result, mock_dataframe)

def test_save_to_local_after_web_fetch(mocker, mock_dataframe, tmp_path):
    mock_read_csv = mocker.patch('source_imdb.pd.read_csv', side_effect=[FileNotFoundError, mock_dataframe])
    mocker.patch('source_imdb.pd.DataFrame.to_csv')
    
    result = source_imdb('test_dataset')
    
    mock_dataframe.to_csv.assert_called_once_with('./.data/test_dataset.csv')
    assert_frame_equal(result, mock_dataframe)

def test_web_fetch_failure(mocker):
    mocker.patch('source_imdb.pd.read_csv', side_effect=[FileNotFoundError, Exception("Web fetch failed")])
    
    with pytest.raises(Exception, match="Web fetch failed"):
        source_imdb('test_dataset')
