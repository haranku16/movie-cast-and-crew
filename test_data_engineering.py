# Below code generated by Perplexity AI
import pytest
import pandas as pd
import numpy as np
from pathlib import Path
import data_engineering as de
from unittest.mock import patch, MagicMock

@pytest.fixture
def mock_source_imdb():
    with patch('data_engineering.source_imdb') as mock:
        yield mock

@pytest.fixture
def sample_dataframes():
    name_basics = pd.DataFrame({
        'nconst': ['nm1', 'nm2', 'nm3'],
        'primaryName': ['Name1', 'Name2', 'Name3']
    })
    
    title_basics = pd.DataFrame({
        'tconst': ['tt1', 'tt2', 'tt3'],
        'primaryTitle': ['Title1', 'Title2', 'Title3']
    })
    
    title_principals = pd.DataFrame({
        'tconst': ['tt1', 'tt1', 'tt2', 'tt3'],
        'nconst': ['nm1', 'nm2', 'nm1', 'nm3'],
        'category': ['actor', 'actress', 'director', 'writer']
    })
    
    title_ratings = pd.DataFrame({
        'tconst': ['tt1', 'tt2', 'tt3'],
        'averageRating': [7.5, 8.0, 6.5]
    })
    
    return name_basics, title_basics, title_principals, title_ratings

@patch('builtins.print')
def test_print_statements(mock_print, mock_source_imdb, sample_dataframes):
    mock_source_imdb.side_effect = sample_dataframes
    de.main()
    expected_prints = [
        'Sourcing data from IMDB...',
        'Computing mean of averageRating grouped by nconst (name)...',
        'Merging into name_basics_df...',
        "Compute mean of averageRating grouped by nconst (name) and category (role in the film's production)...",
        'Merging into name_basics_df...',
        'Merging averageRating into title_basics_df...',
        'Merging averageRating_\{category\} columns into title_basics_df...',
        'Exporting datasets...',
        'title.augmented.csv.gz exported!',
        'name.augmented.csv.gz exported!'
    ]
    for expected in expected_prints:
        mock_print.assert_any_call(expected)
